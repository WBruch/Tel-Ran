package summaryFriday.algsTasks;

public class Task2 {
    /**
     * Оценить временную сложность фрагментов алгоритмов:
     *
     * а) Здесь имеем два вложенных цикла , причем переменные во втором цикле не зависят от первого,
     * т.е. для каждой переменной n из первого цикла мы будем проводить m операций во втором цикле.
     * Я думаю, что временная сложность в данном случае составляет O(n * m)
     * ___________________________________________________________________________________________
     * b) Данный пример похож на первый, также присутствуют два вложенных цикла, но их связывает между собой переменная
     * n , и количество итераций в обоих циклах зависит от нее. Поэтому, мне кажется, что наихудщая сложность по
     * времени составит O(n^2).
     * ____________________________________________________________________________________________
     * c) Аналогично предыдущему примеру, только во втором цикле у нас будет n операций в степени 1/3 т.е. log n по
     * основанию 3. В общем случае временную сложность можно записать как O(n * log3(n)).
     * ____________________________________________________________________________________________
     * d) Внешний цикл выполняется 1000 раз, а внутренний цикл зависит от переменной n.
     * Таким образом, временная сложность этого фрагмента кода будет O(1000 * n), что можно упростить до O(n),
     * так как постоянный множитель 1000 не влияет на асимптотическую сложность, если я все правильно понял из лекции.
     * _____________________________________________________________________________________________
     * e) Внешний цикл выполняется n раз, так как он зависит от переменной n. Внутренний цикл также зависит от n,
     * но его граница составляет n/3, что означает, что он выполнится n/3 раз на каждой итерации внешнего цикла.
     * Таким образом, общая временная сложность этого кода будет O(n * n/3), что можно упростить до O(n^2).
     */

// Написать рекурсивную функцию вычисления факториала factorial(n) - произведения всех чисел до n включительно
    public static void main(String[] args) {
        System.out.println(getFactorial(3));
        System.out.println(getFactorial(5));

    }

    public static int getFactorial(int n) {
        if (n == 1) return 1; // base condition
        return n * getFactorial(n - 1);
    }

}
